// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(CakeCuriousDbContext))]
    [Migration("20221204112221_DatabaseV1_15_AddProductRating_AddCategoryLangCode")]
    partial class DatabaseV1_15_AddProductRating_AddCategoryLangCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Bookmark", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmark");
                });

            modelBuilder.Entity("BusinessObject.Comment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("content");

                    b.Property<int?>("Depth")
                        .HasColumnType("int")
                        .HasColumnName("depth");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("root_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("submitted_date");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("RootId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BusinessObject.CommentMedia", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comment_id");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("media_url");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentMedia");
                });

            modelBuilder.Entity("BusinessObject.Coupon", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(24)")
                        .HasColumnName("code");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("discount");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("int")
                        .HasColumnName("discount_type");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("expiry_date");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("int")
                        .HasColumnName("max_uses");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("BusinessObject.DeactivateReason", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeactivateDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("deactivate_date");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<int?>("ItemType")
                        .HasColumnType("int")
                        .HasColumnName("item_type");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("reason");

                    b.Property<string>("StaffId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("staff_id");

                    b.HasKey("Id");

                    b.ToTable("DeactivateReason");
                });

            modelBuilder.Entity("BusinessObject.Like", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("completed_date");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("coupon_id");

                    b.Property<decimal?>("DiscountedTotal")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("discounted_total");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("order_date");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("processed_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("store_id");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("total");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BusinessObject.OrderDetail", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("photo_url");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(20,4)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ProductType")
                        .HasColumnType("int")
                        .HasColumnName("product_type");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("rating");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("share_url");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BusinessObject.ProductCategory", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("BusinessObject.Recipe", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("CookTime")
                        .HasColumnType("int")
                        .HasColumnName("cook_time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("photo_url");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("published_date");

                    b.Property<int?>("ServingSize")
                        .HasColumnType("int")
                        .HasColumnName("serving_size");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("share_url");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("BusinessObject.RecipeCategory", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("LangCode")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("name");

                    b.Property<int?>("RecipeCategoryGroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeCategoryGroupId");

                    b.ToTable("RecipeCategory");
                });

            modelBuilder.Entity("BusinessObject.RecipeCategoryGroup", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("GroupType")
                        .HasColumnType("int")
                        .HasColumnName("group_type");

                    b.Property<string>("LangCode")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("RecipeCategoryGroup");
                });

            modelBuilder.Entity("BusinessObject.RecipeHasCategory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("RecipeCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeCategoryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeHasCategory");
                });

            modelBuilder.Entity("BusinessObject.RecipeMaterial", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(8)")
                        .HasColumnName("color");

                    b.Property<string>("MaterialName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("material_name");

                    b.Property<int?>("MaterialType")
                        .HasColumnType("int")
                        .HasColumnName("material_type");

                    b.Property<string>("Measurement")
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("measurement");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeMaterial");
                });

            modelBuilder.Entity("BusinessObject.RecipeMedia", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("MediaType")
                        .HasColumnType("int")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("media_url");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeMedia");
                });

            modelBuilder.Entity("BusinessObject.RecipeStep", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("content");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipe_id");

                    b.Property<int?>("StepNumber")
                        .HasColumnType("int")
                        .HasColumnName("step_number");

                    b.Property<int?>("StepTimestamp")
                        .HasColumnType("int")
                        .HasColumnName("step_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeStep");
                });

            modelBuilder.Entity("BusinessObject.RecipeStepMaterial", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("RecipeMaterialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("material_id");

                    b.Property<Guid?>("RecipeStepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("step_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipeMaterialId");

                    b.HasIndex("RecipeStepId");

                    b.ToTable("RecipeStepMaterial");
                });

            modelBuilder.Entity("BusinessObject.ReportCategory", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("LangCode")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("lang_code");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ReportCategory");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(24)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(16)")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Administrator",
                            ShortName = "Admin"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Staff",
                            ShortName = "Staff"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Store Owner",
                            ShortName = "Store"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Baker",
                            ShortName = "Baker"
                        });
                });

            modelBuilder.Entity("BusinessObject.Store", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("photo_url");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("rating");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("share_url");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CitizenshipDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("citizenship_date");

                    b.Property<string>("CitizenshipNumber")
                        .HasColumnType("varchar(24)")
                        .HasColumnName("citizenship_number");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("gender");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("photo_url");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("share_url");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("store_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[username] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "y0Bqpw0nQSaq4rJnZzntgmkQ6ar1",
                            DisplayName = "Administrator",
                            Email = "admin@cakecurious.net",
                            Status = 0
                        });
                });

            modelBuilder.Entity("BusinessObject.UserDevice", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("token");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevice");
                });

            modelBuilder.Entity("BusinessObject.UserFollow", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FollowerId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("follower_id");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollow");
                });

            modelBuilder.Entity("BusinessObject.UserHasRole", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHasRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("248231d9-3f05-473d-9135-7be4188e0635"),
                            RoleId = 0,
                            UserId = "y0Bqpw0nQSaq4rJnZzntgmkQ6ar1"
                        });
                });

            modelBuilder.Entity("BusinessObject.ViolationReport", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("content");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<int?>("ItemType")
                        .HasColumnType("int")
                        .HasColumnName("item_type");

                    b.Property<int?>("ReportCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("ReporterId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("reporter_id");

                    b.Property<string>("StaffId")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("staff_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("submitted_date");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("StaffId");

                    b.ToTable("ViolationReport");
                });

            modelBuilder.Entity("BusinessObject.Bookmark", b =>
                {
                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("Bookmarks")
                        .HasForeignKey("RecipeId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Comment", b =>
                {
                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId");

                    b.HasOne("BusinessObject.Comment", "Root")
                        .WithMany("Replies")
                        .HasForeignKey("RootId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Recipe");

                    b.Navigation("Root");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.CommentMedia", b =>
                {
                    b.HasOne("BusinessObject.Comment", "Comment")
                        .WithMany("Images")
                        .HasForeignKey("CommentId");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BusinessObject.Coupon", b =>
                {
                    b.HasOne("BusinessObject.Store", "Store")
                        .WithMany("Coupons")
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Like", b =>
                {
                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("Likes")
                        .HasForeignKey("RecipeId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.HasOne("BusinessObject.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("BusinessObject.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Coupon");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.OrderDetail", b =>
                {
                    b.HasOne("BusinessObject.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.HasOne("BusinessObject.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("BusinessObject.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.Navigation("ProductCategory");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.Recipe", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.RecipeCategory", b =>
                {
                    b.HasOne("BusinessObject.RecipeCategoryGroup", "RecipeCategoryGroup")
                        .WithMany("RecipeCategories")
                        .HasForeignKey("RecipeCategoryGroupId");

                    b.Navigation("RecipeCategoryGroup");
                });

            modelBuilder.Entity("BusinessObject.RecipeHasCategory", b =>
                {
                    b.HasOne("BusinessObject.RecipeCategory", "RecipeCategory")
                        .WithMany("HasRecipes")
                        .HasForeignKey("RecipeCategoryId");

                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("HasCategories")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeCategory");
                });

            modelBuilder.Entity("BusinessObject.RecipeMaterial", b =>
                {
                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("RecipeMaterials")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.RecipeMedia", b =>
                {
                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("RecipeMedia")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.RecipeStep", b =>
                {
                    b.HasOne("BusinessObject.Recipe", "Recipe")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("BusinessObject.RecipeStepMaterial", b =>
                {
                    b.HasOne("BusinessObject.RecipeMaterial", "RecipeMaterial")
                        .WithMany("RecipeStepMaterials")
                        .HasForeignKey("RecipeMaterialId");

                    b.HasOne("BusinessObject.RecipeStep", "RecipeStep")
                        .WithMany("RecipeStepMaterials")
                        .HasForeignKey("RecipeStepId");

                    b.Navigation("RecipeMaterial");

                    b.Navigation("RecipeStep");
                });

            modelBuilder.Entity("BusinessObject.Store", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.HasOne("BusinessObject.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BusinessObject.UserDevice", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.UserFollow", b =>
                {
                    b.HasOne("BusinessObject.User", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("Followers")
                        .HasForeignKey("UserId");

                    b.Navigation("Follower");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.UserHasRole", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("HasUsers")
                        .HasForeignKey("RoleId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("HasRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.ViolationReport", b =>
                {
                    b.HasOne("BusinessObject.ReportCategory", "ReportCategory")
                        .WithMany("ViolationReports")
                        .HasForeignKey("ReportCategoryId");

                    b.HasOne("BusinessObject.User", "Reporter")
                        .WithMany("ViolationReports")
                        .HasForeignKey("ReporterId");

                    b.HasOne("BusinessObject.User", "Staff")
                        .WithMany("ResolvedViolationReports")
                        .HasForeignKey("StaffId");

                    b.Navigation("ReportCategory");

                    b.Navigation("Reporter");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.Comment", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BusinessObject.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObject.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Recipe", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("HasCategories");

                    b.Navigation("Likes");

                    b.Navigation("RecipeMaterials");

                    b.Navigation("RecipeMedia");

                    b.Navigation("RecipeSteps");
                });

            modelBuilder.Entity("BusinessObject.RecipeCategory", b =>
                {
                    b.Navigation("HasRecipes");
                });

            modelBuilder.Entity("BusinessObject.RecipeCategoryGroup", b =>
                {
                    b.Navigation("RecipeCategories");
                });

            modelBuilder.Entity("BusinessObject.RecipeMaterial", b =>
                {
                    b.Navigation("RecipeStepMaterials");
                });

            modelBuilder.Entity("BusinessObject.RecipeStep", b =>
                {
                    b.Navigation("RecipeStepMaterials");
                });

            modelBuilder.Entity("BusinessObject.ReportCategory", b =>
                {
                    b.Navigation("ViolationReports");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("HasUsers");
                });

            modelBuilder.Entity("BusinessObject.Store", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("HasRoles");

                    b.Navigation("Likes");

                    b.Navigation("Orders");

                    b.Navigation("Recipes");

                    b.Navigation("ResolvedViolationReports");

                    b.Navigation("UserDevices");

                    b.Navigation("ViolationReports");
                });
#pragma warning restore 612, 618
        }
    }
}
